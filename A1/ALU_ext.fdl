dp ALU(
	in A, B : tc(32);
 	in S : ns(2);
 	out R : tc(32);
 	out N, Z : ns(1)
){
	always {
		R = (S==0b00)? A - B :
		 	(S==0b01)? B - A :
		 	(S==0b10)? A :
		 	B;

		N = (R < 0); 
		Z = (R == 0);
	}
}

dp testALU(
	out A, B : tc(32);
	out S : ns(2);
	in R : tc(32);
	in N, Z : ns(1)
) {
	always{
		$display($dec, "Cycle:", $cycle,
			", A=", A,
			", B=", B,
			", S=", S,
			", R=", R,
			", N=", N,
			", Z=", Z
		);
	}
	sfg test_0 { A = 3; B = 6; S = 0b00; }
	sfg test_1 { A = 23; B = 17; S = 0b01; }
	sfg test_2 { A = 12; B = 0; S = 0b10; }
	sfg test_3 { A = 7; B = 0; S = 0b11; }
}

// state machine to control testbench
fsm f_testbench(testALU){
	initial s0; // begin with state s0
	state s1, s2, s3; // other states are: s1, s2, s3
	@s0 (test_0) -> s1; // run test_0 and go to s1
	@s1 (test_1) -> s2; // run test_1 and go to s2
	@s2 (test_2) -> s3; // run test_2 and go to s3
	@s3 (test_3) -> s0; // run test_3 and go to s0
}

system myFirstSystem {
	ALU(A, B, S, R, N, Z);
	testALU(A, B, S, R, N, Z);
}