dp Registerfile(
	in asel, bsel, storesel : ns(3);
	in storeenable : ns(1);
	in storedata : tc(7);
	out a : tc(7);
	out b : tc(7)
){
	reg R0, R1, R2, R3, R4, R5, R6, R7 : tc(7);

	always {
		R0 = 0;
	    R1 = (storeenable==1 & storesel==0b001) ? storedata : R1;
	    R2 = (storeenable==1 & storesel==0b010) ? storedata : R2;
	    R3 = (storeenable==1 & storesel==0b011) ? storedata : R3;
	    R4 = (storeenable==1 & storesel==0b100) ? storedata : R4;
	    R5 = (storeenable==1 & storesel==0b101) ? storedata : R5;
	    R6 = (storeenable==1 & storesel==0b110) ? storedata : R6;
	    R7 = (storeenable==1 & storesel==0b111) ? storedata : R7;


	    a = (asel==0b000)? R0 :
			(asel==0b001)? R1 :
			(asel==0b010)? R2 :
			(asel==0b011)? R3 :
			(asel==0b100)? R4 :
			(asel==0b101)? R5 :
			(asel==0b110)? R6 :
						   R7 ;

		b = (bsel==0b000)? R0 :
			(bsel==0b001)? R1 :
			(bsel==0b010)? R2 :
			(bsel==0b011)? R3 :
			(bsel==0b100)? R4 :
			(bsel==0b101)? R5 :
			(bsel==0b110)? R6 :
						   R7 ;
	}
}

dp testRegisterfile(
	out asel, bsel, storesel : ns(3);
	out storeenable : ns(1);
	out storedata : tc(7);
	in a : tc(7);
	in b : tc(7)
) {
	always{
		$display($dec, "Cycle:", $cycle,
			", asel=", asel,
			", bsel=", bsel,
			", storeenable=", storeenable,
			", storesel=", storesel,
			", storedata=", storedata,
			", a=", a,
			", b=", b
		);
	}

	sfg test_0 {
		asel = 0b001;
		bsel = 0b000;
		storesel = 0b001;
		storeenable = 1;
		storedata = 5; 
	}

	sfg test_1 {
		asel = 0b000;
		bsel = 0b001;
		storesel = 0b001;
		storeenable = 1;
		storedata = 8; 
	}

	sfg test_2 {
		asel = 0b000;
		bsel = 0b001;
		storesel = 0b001;
		storeenable = 1;
		storedata = 8; 
	}

	sfg test_3 {
		asel = 0b000;
		bsel = 0b000;
		storesel = 0b000;
		storeenable = 1;
		storedata = 13; 
	}

	sfg test_4 {
		asel = 0b010;
		bsel = 0b000;
		storesel = 0b010;
		storeenable = 0;
		storedata = 2; 
	}
}

// state machine to control testbench
fsm f_testbench(testRegisterfile){
	initial s0; // begin with state s0
	state s1, s2, s3, s4; // other states are: s1, s2, s3, s4
	@s0 (test_0) -> s1; // run test_0 and go to s1
	@s1 (test_1) -> s2; // run test_1 and go to s2
	@s2 (test_2) -> s3; // run test_2 and go to s3
	@s3 (test_3) -> s4; // run test_3 and go to s4
	@s4 (test_4) -> s0; // run test_4 and go to s0
}

system myFirstSystem {
	Registerfile(asel, bsel, storesel, storeenable, storedata, a, b);
	testRegisterfile(asel, bsel, storesel, storeenable, storedata, a, b);
}